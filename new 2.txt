S2V5IFByb2plY3RzIGFuZCBDb250cmlidXRpb25zDQpFcGljIDE6IEV4YWRhdGEgT2JqZWN0cyBNaWdyYXRpb24gb2YgUG9ydGFsIEFwcGxpY2F0aW9uDQoNCk1pZ3JhdGVkIDIxNiBvYmplY3RzIChUcmlnZ2VycywgVHlwZXMsIFRhYmxlcywgUGFja2FnZXMsIFByb2NlZHVyZXMsIGV0Yy4pIGZyb20gT1dORVJfT1BTIHRvIE9XTkVSX1BSVEwgc2NoZW1hIHRvIGFkZHJlc3Mgc3BhY2UgY29uc3RyYWludHMgYW5kIGltcHJvdmUgZXhwb3J0IGVmZmljaWVuY3kuDQpUZWNobm9sb2dpZXMgVXNlZDogT3JhY2xlLCBIaXZlLCBBdXRvc3lzLCBTY2FsYSwgU3BhcmsuDQpBY2hpZXZlbWVudHM6IENvbXBsZXRlZCBkZXZlbG9wbWVudCBsYW5lIHRlc3RpbmcsIGlkZW50aWZpZWQgYW5kIGRvY3VtZW50ZWQgZXhpc3RpbmcgYnVncywgYW5kIGVzdGFibGlzaGVkIGEgcm9idXN0IHRlc3RpbmcgcHJvY2Vzcy4NCkVwaWMgMjogRW5oYW5jZW1lbnQg4oCTIERhdGEgUHVibGlzaCBUcmlnZ2Vy4oCZcyBBdWRpdCBUYWJsZQ0KDQpJbXBsZW1lbnRlZCBhbiBhdWRpdCB0YWJsZSB3aXRoIGJ1c2luZXNzIHJ1bGVzIGZvciBkYXRhIGNvbnNpc3RlbmN5Lg0KVGVjaG5vbG9naWVzIFVzZWQ6IE9yYWNsZSwgQXV0b3N5cy4NCkFjaGlldmVtZW50czogRGVsaXZlcmVkIHN1Y2Nlc3NmdWwgZGVwbG95bWVudHMgYWNyb3NzIERldi1RQSwgU0lULCBhbmQgUHJvZHVjdGlvbi4NCkVwaWMgMzogU3Bpa2Ug4oCTIFdvcmtiZW5jaCBVcHN0cmVhbSBUYWJsZXMgTWlncmF0aW9uIHRvIFdDQURTIEFwcGxpY2F0aW9uDQoNCkNvbmR1Y3RlZCBhIFBPQyBmb3IgbWlncmF0aW5nIDEwMCsgdGFibGVzIGZyb20gV29ya2JlbmNoIHVwc3RyZWFtIHRvIFdDQURTIGFwcGxpY2F0aW9u4oCZcyBEYXRhLUxha2Ugd2hpbGUgbWFpbnRhaW5pbmcgY29uc2lzdGVudCBBdWRpdCBJRHMgZm9yIGJvdGggc291cmNlcy4NClRlY2hub2xvZ2llcyBVc2VkOiBPcmFjbGUsIEF1dG9zeXMuDQpBY2hpZXZlbWVudHM6IFN1Y2Nlc3NmdWxseSBjb21wbGV0ZWQgdGhlIFBPQywgcHJvdmluZyBkYXRhIGNhbiBiZSBzb3VyY2VkIGZyb20gZHVhbCBzb3VyY2VzIHdoaWxlIG1lZXRpbmcgYXVkaXQgcmVxdWlyZW1lbnRzLg0KT3RoZXIgTm90YWJsZSBDb250cmlidXRpb25zOg0KDQpJbnRlcm5hbCBjb2RlIHJldmlld3MgZm9yIGJhY2tlbmQgZXBpY3MsIHN1cHBvcnRpbmcgcHJvZHVjdGlvbiBpc3N1ZSByZXNvbHV0aW9uLCB0ZXN0LWxhbmUgc29sdXRpb25pbmcsIGFuZCBQT0MgaW5pdGlhdGl2ZXMgaW52b2x2aW5nIE9yYWNsZSBzZXF1ZW5jZXMsIERlbHRhLVRhYmxlcywgYW5kIEhpdmUgZW5oYW5jZW1lbnRzLg0KUmVjb2duaXRpb24gYW5kIEF3YXJkcw0KUmVjZWl2ZWQgdGhlIEJyb256ZSBBd2FyZCBmb3Igc2lnbmlmaWNhbnQgY29udHJpYnV0aW9ucyB0byB0aGUgRXhhZGF0YSBNaWdyYXRpb24gcHJvamVjdC4NCkNoYWxsZW5nZXMgYW5kIExlYXJuaW5nDQpGYWNlZCBjaGFsbGVuZ2VzIGluIHNjaGVtYSBtaWdyYXRpb25zLCBjb29yZGluYXRpb24gd2l0aCBtdWx0aXBsZSB0ZWFtcywgYW5kIHRlY2huaWNhbCBkZWxheXMuIERlc3BpdGUgdGhpcywgSSBwcm9hY3RpdmVseSBlbmdhZ2VkIGluIHByb2JsZW0tc29sdmluZyBhbmQgbWFpbnRhaW5lZCBmb2N1cyBvbiBrZXkgZGVsaXZlcmFibGVzLg0KDQpBcmVhcyBmb3IgSW1wcm92ZW1lbnQgYW5kIEFjdGlvbiBQbGFuDQpBZ2lsZSBQYXJ0aWNpcGF0aW9uOiBGdWxsIGVuZ2FnZW1lbnQgaW4gQWdpbGUgY2VyZW1vbmllcyBhbmQgcGxhbm5pbmcgc2Vzc2lvbnMuDQpQcm9jZXNzIEFkaGVyZW5jZTogRm9sbG93IHRoZSAzLzIgd29yayBtb2RlbCwga2VlcCBjb21tdW5pY2F0aW9ucyB0cmFuc3BhcmVudCwgYW5kIGFsaWduIHdpdGggcHJpb3JpdGllcy4NCkVmZmVjdGl2ZSBDb21tdW5pY2F0aW9uOiBFbmhhbmNlIG9yYWwgY29tbXVuaWNhdGlvbiBpbiB0ZWFtIG1lZXRpbmdzLCBidWlsZGluZyBvbiBpbXByb3ZlZCB3cml0dGVuIHNraWxscy4NCklubm92YXRpb24vUmlzazogRm9jdXMgb24gdGFuZ2libGUgY29udHJpYnV0aW9ucyB0byBpbm5vdmF0aW9uLCBhbGlnbmluZyB3b3JrIHdpdGggcHJvZ3JhbSBnb2Fscy4NClJpc2sgQXdhcmVuZXNzOiBBZGhlcmUgdG8gcmlzayBjdWx0dXJlIGd1aWRlbGluZXMsIGVuc3VyaW5nIG5vIHZpb2xhdGlvbnMuDQpDbG9zaW5nIFJlbWFya3MNClRoaXMgeWVhciBoYXMgYmVlbiBhYm91dCBkcml2aW5nIGNvbXBsZXggbWlncmF0aW9ucywgYmFsYW5jaW5nIG11bHRpcGxlIHJvbGVzLCBhbmQgbGVhcm5pbmcgZnJvbSBkeW5hbWljIHByb2plY3QgY2hhbGxlbmdlcy4gSSBhbSBjb21taXR0ZWQgdG8gb25nb2luZyBpbXByb3ZlbWVudCBhbmQgZGVsaXZlcmluZyB2YWx1ZSBpbiBhbGlnbm1lbnQgd2l0aCBjb21wYW55IG9iamVjdGl2ZXMuDQo